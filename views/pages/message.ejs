<% extend('../defaultLayouts/defaultLayout') %>
<% var months = ["January", "February", "March", "April", "May", "June", "July","August", "September", "October","November", "December"]; %>

<div class="app-content content container-fluid">
  <div class="col-xl-12">
    <div class="sidebar-left sidebar-fixed ps-container ps-theme-dark" data-ps-id="03674ca8-d455-878f-efc6-2c1d320c2753">
      <div class="sidebar">
        <div class="sidebar-content card hidden-md-down">
          <div class="row card-block chat-fixed-search">
            <fieldset class="form-group position-relative has-icon-left m-0">
              <input type="text" class="form-control" id="iconLeft4" placeholder="Search user">
              <div class="form-control-position">
                  <i class="ft-search"></i>
              </div>
            </fieldset>
          </div>
          <div id="users_list" class="list-group position-relative" style="max-height: 700px; overflow-y: auto; -ms-overflow-style: -ms-autohiding-scrollbar">

          </div>
        </div>
      </div>
      <div class="ps-scrollbar-x-rail" style="left: 0px; bottom: 3px;">
        <div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div>
      </div>
      <div class="ps-scrollbar-y-rail" style="top: 0px; height: 820px; right: 3px;">
        <div class="ps-scrollbar-y" tabindex="0" style="top: 82px; height: 738px;"></div>
      </div>
    </div>

    <div class="content-right">
      <div class="content-wrapper">
        <div class="content-header row">
        </div>
        <div class="content-body">
          <!-- where the current conversation is shown -->
          <div id="current_chat" style="width: 100%; padding-top: 0px; text-align: center"></div>
          <!-- chat area -->
          <br>
          <section id="chat_section" class="chat-app-form">
            <!-- this is where messages appear -->
            <div id="chatroom" style="max-height: 550px; overflow-y: auto; -ms-overflow-style: -ms-autohiding-scrollbar">

            </div>
            <!-- this is where user types their messages -->
            <form id="chatbox" class="chat-app-input" autocomplete="off" style="position: fixed; bottom: 0; width: 62%; padding-bottom: 20px" required>
              <!-- input box -->
              <fieldset class="form-group col-xs-10 m-0">
                <div class="form-control-position">
                  <i class="icon-emoticon-smile"></i>
                </div>
                <input id="message" type="text" value="" class="form-control" placeholder="Type your message"></input>
                <div class="form-control-position control-position-right">
                </div>
              </fieldset>
              <!-- send button -->
              <fieldset class="form-group position-relative has-icon-left col-xs-2 m-0">
                <button id="send_message" type="button" class="btn btn-primary"><i class="fa fa-paper-plane-o hidden-lg-up"></i>
                  <span class="hidden-md-down">Send</span>
                </button>
              </fieldset>
            </form>
            <div id="hidden-div"><%= currentAcc._id %></div>
          </section>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- script stuff -->
<script src="scripts/suggest.js" type="text/javascript"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
  $(document).ready(function() {
    $('#current_chat').hide();
    $('#hidden-div').hide();
    // chat function
    var socket = io();
    var chat_section = $('#chat_section');
    var chatroom = $('#chatroom');
    var message = $('#message');
    var send_message = $('#send_message');
    var chatbox = $('#chatbox');
    var current_user_name = $('.current_user_name').html();
    var users_list = $('#users_list');
    var current_chat = $('#current_chat');
    var current_chat_name = $('#current_chat_name');
    var currentSocketID = $('#hidden-div').html();
    var msg_noti = $('#msg_noti');
    var msg_noti_val = $('#msg_noti_val');
    var msg_noti_box = $('#msg_noti_box');
    var users_toggle = $('#users_toggle');
    var orgs_toggle = $('#orgs_toggle');

    //loading all chatable users
    socket.on('new connection', (data) => {
      socket.emit('connect self', {currentSocketID});
      let chatSession = data.chatSession;
      let allMessages = data.allMessages;
      chatSession.forEach(session => {
        // search for the right session here based on sessionID
        if(session.sessionID === currentSocketID) {
          let connectedUsers = session.connectedUsers.slice();
          let currentSocket = session.currentSocket;
          let type = currentSocket.type;
          // showing last chat history
          let sentMessages = allMessages.filter(message => message.creator === currentSocketID);
          if(sentMessages.length > 0) {
            sentMessages.sort((a, b) => {
              return a.sort_value - b.sort_value;
            })
            let lastChat = sentMessages[sentMessages.length - 1].recipient;
            if(current_chat.html() == '') {
              connectedUsers.forEach(user => {
                if(user.name === lastChat) {
                  current_chat.show();
                  current_chat.html(user.name);
                  setTimeout(() => {
                    chatroom.scrollTop(chatroom.prop('scrollHeight'));
                  }, 0);
                  let mutualMessages = allMessages.filter(message => ((message.creator === currentSocketID && message.recipient === user.name) || (message.creator === user.id && message.recipient === currentSocket.name)));
                  mutualMessages.sort((a, b) => {
                    return a.sort_value - b.sort_value;
                  })
                  mutualMessages.forEach(item => {
                    if(item.creator === currentSocketID) {
                      let message = item.message;
                      let date = item.created_at;
                      let new_log = `
                        <div class="chat">
                          <div class="chat-body">
                            <div class="chat-content" style="text-align: right; position: relative; display: block; float: right; padding: 8px 15px; margin: 0 20px 10px 0; clear: both; color: #fff; background-color: #00B5B8; border-radius: 4px; max-width: 50%">
                              <p>${message}</p>
                            </div>
                          </div>
                        </div>
                      `;
                      //displaying message user sent
                      chatroom.append('<li>' + new_log + '</li>');
                    } else {
                      item.read = true;
                      let message = item.message;
                      let date = item.created_at;
                      let new_log = `
                        <div class="chat chat-left" style="right: auto; left: -10px; border-right-color: #edeef0; border-left-color: transparent;">
                          <div class="chat-body">
                            <div class="chat-content" style="text-align: left; float: left; margin: 0 0 10px 20px; color: #404E67; background-color: #edeef0; position: relative; display: block; padding: 8px 15px; clear: both; max-width: 50%">
                              <p>${message}</p>
                            </div>
                          </div>
                        </div>
                      `;
                      //displaying messages user received
                      chatroom.append('<li>' + new_log + '</li>');
                    }
                  });
                }
              });
            }
          }
          //displaying all chatable users
          connectedUsers.forEach(user => {
            let room_id = user.id;
            let name = user.name;
            let avatar = user.avatar;
            let recentMessages = allMessages.filter(message => (message.creator === currentSocketID && message.recipient === name) || (message.creator === room_id && message.recipient === currentSocket.name));
            //sorting recent mutual messages by time
            recentMessages.sort((a, b) => {
              return a.sort_value - b.sort_value;
            })
            //displaying chat menu on right side
            if(users_list.children().length < connectedUsers.length) {
              if(recentMessages.length > 0) {
                let mostRecentMessage = recentMessages[recentMessages.length - 1].message;
                let lastSent = recentMessages[recentMessages.length - 1].created_at + "";
                if(mostRecentMessage.length > 15) {
                  mostRecentMessage = mostRecentMessage.substr(0, 15) + '...';
                }
                let date = lastSent.substr(0, 10);
                //conditions to show different icons and info
                if(recentMessages[recentMessages.length - 1].creator === room_id) {
                  users_list.append(
                    `<a id="${room_id}" class="list-group-item list-group-item-action media no-border">
                      <div class="media-left">
                        <span class="avatar avatar-md avatar-away"><img src="${avatar}" class="media-object rounded-circle width-30 height-30"/></span>
                      </div>
                      <div class="media-body">
                        <h6 class="list-group-item-heading">${name}<span class="font-small-3 float-xs-right primary">${date}</span></h6>
                        <p id="${room_id}-messages" class="list-group-item-text text-muted"><i class="ft-corner-down-right font-small-2"></i> ${mostRecentMessage}</p>
                      </div>
                    </a>`
                  );
                } else {
                  users_list.append(
                    `<a id="${room_id}" class="list-group-item list-group-item-action media no-border">
                      <div class="media-left">
                        <span class="avatar avatar-md avatar-away"><img src="${avatar}" class="media-object rounded-circle width-30 height-30"/></span>
                      </div>
                      <div class="media-body">
                        <h6 class="list-group-item-heading">${name}<span class="font-small-3 float-xs-right primary">${date}</span></h6>
                        <p id="${room_id}-messages" class="list-group-item-text text-muted"><i class="ft-corner-down-left font-small-2"></i> ${mostRecentMessage}</p>
                      </div>
                    </a>`
                  );
                }
              } else {
                users_list.append(
                  `<a id="${room_id}" class="list-group-item list-group-item-action media no-border">
                    <div class="media-left">
                      <span class="avatar avatar-md avatar-away"><img src="${avatar}" class="media-object rounded-circle width-30 height-30"/></span>
                    </div>
                    <div class="media-body">
                      <h6 class="list-group-item-heading">${name}<span class="font-small-3 float-xs-right primary"></span></h6>
                      <p id="${room_id}-messages" class="list-group-item-text text-muted"><i class="ft-check font-small-2"></i> no messages yet</p>
                    </div>
                  </a>`
                );
              }
            }
            //add functionality to chat menu
            let mutualMessages = allMessages.filter(message => ((message.creator === currentSocketID && message.recipient === name) || (message.creator === room_id && message.recipient === currentSocket.name)));
            mutualMessages.sort((a, b) => {
              return a.sort_value - b.sort_value;
            })
            let button_id = '#' + room_id;
            //when a user is clicked
            $(button_id).bind('click', () => {
              //some stuff for css
              setTimeout(() => {
                chatroom.scrollTop(chatroom.prop('scrollHeight'));
              }, 0);
              users_list.children().attr('style', 'background-color: #FFFFFF');
              $(button_id).attr('style', 'background-color: #F5F5F5');
              if(chatroom.children().length > 0) {
                chatroom.children().remove();
              }
              current_chat.show();
              current_chat.html(name);

              //actual important code
              mutualMessages.forEach(item => {
                if(item.creator === currentSocketID) {
                  let message = item.message;
                  let date = item.created_at;
                  let new_log = `
                    <div class="chat">
                      <div class="chat-body">
                        <div class="chat-content" style="text-align: right; position: relative; display: block; float: right; padding: 8px 15px; margin: 0 20px 10px 0; clear: both; color: #fff; background-color: #00B5B8; border-radius: 4px; max-width: 50%">
                          <p>${message}</p>
                        </div>
                      </div>
                    </div>
                  `;
                  //displaying message user sent
                  chatroom.append('<li>' + new_log + '</li>');
                } else {
                  item.read = true;
                  let message = item.message;
                  let date = item.created_at;
                  let new_log = `
                    <div class="chat chat-left" style="right: auto; left: -10px; border-right-color: #edeef0; border-left-color: transparent;">
                      <div class="chat-body">
                        <div class="chat-content" style="text-align: left; float: left; margin: 0 0 10px 20px; color: #404E67; background-color: #edeef0; position: relative; display: block; padding: 8px 15px; clear: both; max-width: 50%">
                          <p>${message}</p>
                        </div>
                      </div>
                    </div>
                  `;
                  //displaying messages user received
                  chatroom.append('<li>' + new_log + '</li>');
                }
              });
            });
          });
        }
      });
    });

    //sending a message
    chatbox.submit((e) => {
      // e.preventDefault();
      if (current_chat.html() != '') {
        socket.emit('private message', {
          message: message.val(),
          sender: current_user_name,
          recipient: current_chat.html(),
          currentSocketID,
        });
        socket.emit('leave rooms', {currentSocketID});
      }
      message.val('');
      return false;
    });

    //show private message on the screen
    socket.on('private message', (data) => {
      let temp = data.message;
      let creator = temp.creator;
      let message = temp.message;
      let sender = temp.sender;
      let recipient = temp.recipient;
      let room_id = data.room_id;
      let button_id = '#' + room_id + '-messages';
      let button_id2 = '#' + creator + '-messages';
      if(message.length > 15) {
        message_shortened = message.substr(0, 15) + '...';
      }

      if(creator === currentSocketID) {
        let new_log = `
          <div class="chat">
            <div class="chat-body">
              <div class="chat-content" style="text-align: right; position: relative; display: block; float: right; padding: 8px 15px; margin: 0 20px 10px 0; clear: both; color: #fff; background-color: #00B5B8; border-radius: 4px;">
                <p>${message}</p>
              </div>
            </div>
          </div>
        `;
        chatroom.append('<li>' + new_log + '</li>');
        $(button_id).html(`<i class="ft-corner-down-left font-small-2"></i> ${message_shortened}`);
        chatroom.scrollTop(chatroom.prop('scrollHeight'));
      } else {
        current_chat.show();
        current_chat.html(sender);
        let new_log = `
          <div class="chat chat-left" style="right: auto; left: -10px; border-right-color: #edeef0; border-left-color: transparent;">
            <div class="chat-body">
              <div class="chat-content" style="text-align: left; float: left; margin: 0 0 10px 20px; color: #404E67; background-color: #edeef0; position: relative; display: block; padding: 8px 15px; clear: both;">
                <p>${message}</p>
              </div>
            </div>
          </div>
        `;
        chatroom.append('<li>' + new_log + '</li>');
        $(button_id2).html(`<i class="ft-corner-down-right font-small-2"></i> ${message_shortened}`);
        chatroom.scrollTop(chatroom.prop('scrollHeight'));
      }
    });

    //disconnection
    socket.on('disconnect', () => {
      socket.emit('disconnect', {currentSocketID});
    });
  });
</script>
